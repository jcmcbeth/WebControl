using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml.Serialization;
using System.IO;

namespace WebControl
{
    public partial class WebControlForm : Form
    {
        private bool exit;
        private bool blocked;

        private bool error;

        private readonly string DataFilename = Application.LocalUserAppDataPath + "\\data.xml";
        private readonly string HostsFilename = Environment.GetFolderPath(Environment.SpecialFolder.System)
            + @"\drivers\etc\hosts";

        private WebControlData data;

        private string BlockSectionBegin =
            Environment.NewLine
          + Environment.NewLine
          + "# Block Section Begin"
          + Environment.NewLine;

        private string BlockSectionDisclaimer =
            "# This section is generated by the Web Control"
          + Environment.NewLine
          + "# site blocking utility. Please do not modify anything in this"
          + Environment.NewLine
          + "# section."
          + Environment.NewLine;

        private string BlockSectionEnd =
            "# Block Section End"
          + Environment.NewLine
          + Environment.NewLine;

        public WebControlForm()
        {            
            InitializeComponent();

            blocked = false;
            exit = false;
            error = false;

            data = new WebControlData();
        }

        #region UI Operations

        public void MinimizeToTray()
        {
            WindowState = FormWindowState.Minimized;
            ShowInTaskbar = false;

            niTray.Visible = true;
        }

        public void MaximizeFromTray()
        {
            niTray.Visible = false;

            ShowInTaskbar = true;
            WindowState = FormWindowState.Normal;
        }

        /// <summary>
        /// Exports the currently saved data to file selected with a SaveFileDialog.
        /// </summary>
        public void Export()
        {
            DialogResult result;

            result = exportFileDialog.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                try
                {
                    SaveDataToFile(exportFileDialog.FileName, data);

                    MessageBox.Show(this, "Export successful!", "Export", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
#if DEBUG
                    MessageBox.Show(this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
#else
                    MessageBox.Show(this, "Unable to export data to file.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
#endif
                }
            }
        }

        /// <summary>
        /// Imports data from a XML file that is selected with an OpenFileDialog.
        /// </summary>
        public void Import()
        {
            DialogResult result;

            result = importFileDialog.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                try
                {
                    data = LoadDataFromFile(importFileDialog.FileName);

                    SetFormData(data);

                    MessageBox.Show(this, "Import successful!", "Import", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
#if DEBUG
                    MessageBox.Show(this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
#else
                    MessageBox.Show(this, "Unable to import data from file.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
#endif
                }
            }
        }

        public void LoadData()
        {
            if (!File.Exists(DataFilename))
            {
                MessageBox.Show(this, "No data file was found.  It may not have been created yet.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            try
            {
                data = LoadDataFromFile(DataFilename);

                SetFormData(data);
            }
            catch (Exception ex)
            {
#if DEBUG
                MessageBox.Show(this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
#else
                MessageBox.Show(this, "Unable to read data from file.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
#endif
            }
        }

        public void SaveData()
        {
            data = GetFormData();

            try
            {
                SaveDataToFile(DataFilename, data);
            }
            catch (Exception ex)
            {
#if DEBUG
                MessageBox.Show(this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);                
#else
                MessageBox.Show(this, "Unable to save data to file.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
#endif
            }

            // Update the file
            if (blocked)
                Block();
        }

        public void Block()
        {
            string text;

            try
            {
                text = File.ReadAllText(HostsFilename);

                if (BlockSectionExists(text))
                    text = RemoveBlockSection(text);

                text = AddBlockSection(text);

                File.WriteAllText(HostsFilename, text);

                blocked = true;

                // Success
                error = false;
            }
            catch (FileNotFoundException)
            {
                ShowErrorMessage("The hosts file was not found. This might indicate an issue with your system.", "Fatal Error");
            }
            catch (UnauthorizedAccessException)
            {
                ShowErrorMessage("Unable to access the hosts file.  Make sure the application was run as an administrator");
            }
        }

        /// <summary>
        /// Shows an error message if none has been show recently.
        /// </summary>
        /// <remarks>For showing error messages that might occur frequently.</remarks>
        /// <param name="message"></param>
        private void ShowErrorMessage(string message, string title = "Error") {
            if (!error) {
                MessageBox.Show(this, message, title, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            error = true;
        }

        public void Unblock()
        {
            string text;

            try
            {
                text = File.ReadAllText(HostsFilename);

                if (BlockSectionExists(text))
                    text = RemoveBlockSection(text);

                File.WriteAllText(HostsFilename, text);

                blocked = false;
            }
            catch (FileNotFoundException)
            {
                MessageBox.Show(this, "The hosts file was not found. This might indicate an issue with your system.", "Fatal Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (UnauthorizedAccessException)
            {
                MessageBox.Show(this, "Unable to access the hosts file.  Make sure the application was run as an administrator", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #endregion

        /// <summary>
        /// Checks if a block section already exists in the hosts file text.
        /// </summary>
        /// <param name="text"></param>
        /// <returns></returns>
        private bool BlockSectionExists(string text)
        {
            return text.Contains(BlockSectionBegin);
        }

        /// <summary>
        /// Adds a block section to the host file text.
        /// </summary>
        /// <param name="text"></param>
        /// <returns></returns>
        private string AddBlockSection(string text)
        {
            text += BlockSectionBegin;
            text += BlockSectionDisclaimer;
            text += Environment.NewLine;

            foreach (string site in data.Websites)
            {
                Uri uri = new Uri(site);
                // Using 127.0.0.0 to avoid local web server issues and it
                // supposidly errors out faster than 127.0.0.1
                text += "127.0.0.0 " + uri.Host + Environment.NewLine;
            }

            text += Environment.NewLine;
            text += BlockSectionEnd;

            return text;
        }

        /// <summary>
        /// Removes a block section from the hosts file text.
        /// </summary>
        /// <returns></returns>
        private string RemoveBlockSection(string text)
        {
            int start;
            int end;
            string result;

            start = text.IndexOf(BlockSectionBegin);
            end = text.IndexOf(BlockSectionEnd);

            if (start < 0 && end < 0)
                return text;

            if (start < 0)
                throw new Exception("Missing section start.");

            if (end < 0)
                throw new Exception("Missing section end.");

            result = text.Substring(0, start);
            result += text.Substring(end + BlockSectionEnd.Length);

            return result;
        }

        private bool IsBreakActive(ScheduleItem item)
        {
            TimeSpan time = DateTime.Now.TimeOfDay;
            TimeSpan start = item.Start.TimeOfDay;
            TimeSpan end = item.End.TimeOfDay;

            if (time.CompareTo(start) >= 0 && time.CompareTo(end) < 0)
                return true;

            return false;
        }

        /// <summary>
        /// Populates the forms with data.
        /// </summary>
        /// <param name="formData">Data to populate the form values with.</param>
        private void SetFormData(WebControlData formData)
        {
            StringBuilder builder;

            builder = new StringBuilder();
            foreach (string site in formData.Websites)
            {
                builder.Append(site);
                builder.Append("\r\n");
            }

            txtWebsites.Text = builder.ToString();

            foreach (ScheduleItem item in formData.Schedule)
            {
                ListViewItem listItem;

                listItem = new ListViewItem(item.Name);
                listItem.SubItems.Add(item.Start.ToShortTimeString());
                listItem.SubItems.Add(item.End.ToShortTimeString());
                listItem.Tag = item;

                lvSchedule.Items.Add(listItem);
            }
        }

        /// <summary>
        /// Reads form values and populates an object with the values.
        /// </summary>
        /// <returns>Data populated from the form values.</returns>
        private WebControlData GetFormData()
        {
            WebControlData formData;
            List<ScheduleItem> items;

            formData = new WebControlData();
            formData.Websites = txtWebsites.Text.Split(
                new string[] { "\r\n" },
                StringSplitOptions.RemoveEmptyEntries);

            items = new List<ScheduleItem>();
            foreach (ListViewItem item in lvSchedule.Items)
                items.Add((ScheduleItem)item.Tag);

            formData.Schedule = items.ToArray();

            return formData;
        }

        /// <summary>
        /// Saves data to file.
        /// </summary>
        /// <param name="filename"></param>
        /// <param name="exportData"></param>
        private static void SaveDataToFile(string filename, WebControlData exportData)
        {
            XmlSerializer serializer;
            FileStream stream;

            serializer = new XmlSerializer(typeof(WebControlData));

            stream = new FileStream(filename, FileMode.Create, FileAccess.Write);
            serializer.Serialize(stream, exportData);
            stream.Close();
        }

        /// <summary>
        /// Loads data from an XML file into a WebControlData object.
        /// </summary>
        /// <param name="filename">Filename of the XML to load the WebControlData.</param>
        /// <returns>WebControlData object that was loaded from file.</returns>
        private static WebControlData LoadDataFromFile(string filename)
        {
            XmlSerializer serializer;
            FileStream stream;
            WebControlData importData;

            serializer = new XmlSerializer(typeof(WebControlData));

            stream = File.OpenRead(filename);
            importData = (WebControlData)serializer.Deserialize(stream);
            stream.Close();

            return importData;
        }

        #region Event Handlers

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveData();
        }

        private void WebControlForm_Load(object sender, EventArgs e)
        {
            LoadData();

            Block();
            blockTimer.Start();
        }

        private void blockTimer_Tick(object sender, EventArgs e)
        {
            bool block = true;

            foreach (ScheduleItem item in data.Schedule)
            {
                if (IsBreakActive(item))
                {
                    block = false;
                    break;
                }
            }

            if (block && !blocked)
                Block();
            else if (!block && blocked)
                Unblock();
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string text;

            text = string.Format("{0} v{1}\r\n\r\n{2}\r\njoel.mcbeth@gmail.com\r\n\r\nCopyright © 2010.  All rights reserved.",
                Application.ProductName, Application.ProductVersion, Application.CompanyName);

            MessageBox.Show(this, text, "About", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            ScheduleItem item;
            ListViewItem listItem;

            try
            {
                item = new ScheduleItem()
                {
                    Name = txtName.Text,
                    Start = DateTime.Parse(txtStart.Text),
                    End = DateTime.Parse(txtEnd.Text)
                };

                listItem = new ListViewItem(item.Name);
                listItem.SubItems.Add(item.Start.ToShortTimeString());
                listItem.SubItems.Add(item.End.ToShortTimeString());
                listItem.Tag = item;

                lvSchedule.Items.Add(listItem);

                txtName.ResetText();
                txtStart.ResetText();
                txtEnd.ResetText();
            }
            catch (FormatException)
            {
                MessageBox.Show(this, "The start and end times must be valid times.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void removeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in lvSchedule.SelectedItems)
            {
                lvSchedule.Items.Remove(item);
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {            
            exit = true;
            this.Close();
        }

        private void WebControlForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!exit)
            {
                MinimizeToTray();

                e.Cancel = true;
            }
            else
            {
                blockTimer.Enabled = false;

                // So the tray icon doesn't stay in the tray after the
                // application is closed
                niTray.Visible = false;
            }
        }

        private void niTray_DoubleClick(object sender, EventArgs e)
        {
            MaximizeFromTray();
        }

        private void importToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Import();
        }

        private void exportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Export();
        }

        #endregion
    }
}
